import { expect } from 'chai'
import {
  GeneratorListener,
  MapGeneratorListener
} from '../src/generatorlistener'

/**
 * Puts the async code after it back at the bottom of the event queue. Used for
 * testing async stuff that's supposed to resolve immediately.
 */
const requeue = (): Promise<void> => new Promise((r) => setTimeout(r, 0))

let done = false
let val: unknown | undefined = undefined
let err: Error | undefined

/**
 * Set the `done`, `val`, and `err` variables when the promise resolves
 * @param p The promise
 * @returns A promise generated by `requeue`. This does **not** resolve when
 * `p` resolves!
 */
function awaitResult<T> (p: Promise<T>): Promise<void> {
  done = false
  val = undefined
  err = undefined
  p.then((v) => (val = v), (e) => (err = e)).then(() => (done = true))
  return requeue()
}

describe('[generatorlistener.ts] GeneratorListener', () => {
  it('generator returns initial value', async () => {
    const gl = new GeneratorListener<string>('hi')
    const gen = gl.generate()

    await awaitResult(gen.next())
    expect(done).to.be.true
    expect(val).to.be.deep.equal({ value: 'hi', done: false })
  })
  it('pushUpdate causes generate', async () => {
    const gl = new GeneratorListener<void>(undefined)
    const gen = gl.generate()

    await awaitResult(gen.next())
    expect(done).to.be.true

    await awaitResult(gen.next())
    expect(done).to.be.false
    gl.pushUpdate()
    await requeue()
    expect(done).to.be.true
  })
  it('canceled generator callbacks linger for at most one update', async () => {
    const gl = new GeneratorListener<void>(undefined)
    const gen = gl.generate()

    await awaitResult(gen.next())
    gen.return()
    // One update
    gl.pushUpdate()
    await requeue()
    expect(gl.callbacks.size).to.be.equal(0)
  })
  it('value getter returns value', async () => {
    const gl = new GeneratorListener<string>('abc')
    expect(gl.value).to.be.equal('abc')
    gl.value = '123'
    expect(gl.value).to.be.equal('123')
  })
  it('value setter pushes update only if different', async () => {
    const gl = new GeneratorListener<string>('abc')
    const gen = gl.generate()

    await awaitResult(gen.next())
    expect(done).to.be.true

    await awaitResult(gen.next())
    gl.value = 'abc'
    await requeue()
    expect(done).to.be.false
    gl.value = '123'
    await requeue()
    expect(done).to.be.true
  })
})

describe('[generatorlistener.ts] MapGeneratorListener', () => {
  // The `pushUpdates` algorithm is basically the same as with the traditional
  // `GeneratorListener`, so it's tested indirectly
  describe('value', () => {
    it('can set + retrieve keys normally', () => {
      const gl = new MapGeneratorListener<string>()
      gl.value['a'] = 'abc'
      gl.value['b'] = '123'
      gl.value['c'] = 'xyz'

      gl.value['b'] = undefined
      delete gl.value['c']

      expect(gl.value['a']).to.be.equal('abc')
      expect(gl.value['b']).to.be.undefined
      expect(gl.value['c']).to.be.undefined
    })
    it('can get keys with `Object.keys`', () => {
      const gl = new MapGeneratorListener<string>()
      gl.value['a'] = 'abc'
      gl.value['b'] = '123'
      gl.value['c'] = 'xyz'

      expect(Object.keys(gl.value)).to.include('a')
      expect(Object.keys(gl.value)).to.include('b')
      expect(Object.keys(gl.value)).to.include('c')
    })
    it('can verify if key exists', () => {
      const gl = new MapGeneratorListener<string>()
      gl.value['a'] = 'abc'
      gl.value['b'] = '123'
      gl.value['c'] = 'xyz'

      expect('a' in gl.value).to.be.true
      expect('b' in gl.value).to.be.true
      expect('c' in gl.value).to.be.true
      expect('d' in gl.value).to.be.false
    })
  })
  describe('generateKeys', () => {
    it('generateKeys returns initial value', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateKeys()

      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: [], done: false })
    })
    it('responds to key change undefined/defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateKeys()
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: [], done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: ['a'], done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      delete gl.value['a']
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: [], done: false })
    })
    it('does not respond to value changes if both defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateKeys()
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: [], done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: ['a'], done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hello'
      await requeue()
      expect(done).to.be.false

      // Update the key so the promise finishes
      delete gl.value['a']
    })
  })
  describe('generateMap', () => {
    it('generateMap returns initial value', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateMap()

      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: {}, done: false })
    })
    it('responds to key change undefined/defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateMap()
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: {}, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: { a: 'hi' }, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      delete gl.value['a']
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: {}, done: false })
    })
    it('responds to value changes where both defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generateMap()
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: {}, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: { a: 'hi' }, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hello'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: { a: 'hello' }, done: false })
    })
  })
  describe('generate', () => {
    it('generate returns initial value', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generate('abc')

      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: undefined, done: false })
    })
    it('responds to key change undefined/defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generate('a')
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: undefined, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: 'hi', done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      delete gl.value['a']
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: undefined, done: false })
    })
    it('responds to value changes where both defined', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generate('a')
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: undefined, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hi'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: 'hi', done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['a'] = 'hello'
      await requeue()
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: 'hello', done: false })
    })
    it('does not respond to other key changes', async () => {
      const gl = new MapGeneratorListener<string>()
      const gen = gl.generate('a')
  
      await awaitResult(gen.next())
      expect(done).to.be.true
      expect(val).to.be.deep.equal({ value: undefined, done: false })
  
      await awaitResult(gen.next())
      expect(done).to.be.false
      gl.value['b'] = 'hi'
      await requeue()
      expect(done).to.be.false
    })
  })
})